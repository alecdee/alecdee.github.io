0 0 demo

demo:

	#Multiplication
	#ret0 = mul0 * mul1 >> 64
	#ret1 = mul0 * mul1 & (2^64-1)
	0 ? uint.mul .ret0 .ret1 .mul0 .mul1
	0 ? print 0-1 .mul0 32 42 32 0-1 .mul1 32 61 32 0-1 .ret1 10 0

	#Division
	#ret0 = num / den
	#ret1 = num % den
	0 ? uint.div .ret0 .ret1 .num .den
	0 ? print 0-1 .num 32 47 32 0-1 .den 32 32 61 32 0-1 .ret0 32 114 101 109 97 105 110 100 101 114 32 0-1 .ret1 10 0

	#Bitwise AND
	#ret0 = and0 & and1
	0 ? uint.and .ret0 .and0 .and1
	0 ? print 32 0-1 .and0 32 38 32 0-1 .and1 32 32 61 32 0-1 .ret0 10 0

	0-1 0 0

	#Variables
	.ret0: 0
	.ret1: 0

	.mul0: 457
	.mul1: 135

	.num:  933
	.den:  51

	.and0: 90
	.and1: 17

#|==============================================================================

Unsigned Integer Operations - v3.09

Author: Alec Dee - alecdee.github.io - akdee144@gmail.com

--------------------------------------------------------------------------------
Notes

This library provides functions for performing most of the common unsigned
integer operations. In particular, it handles comparisons, arithmetic, and
bitwise operations.

Almost all functions are bit length agnostic. That is, they don't need to be
modified even if unileq uses a something other than 64 bit integers. The only
functions that need the bit length set are uint.mul and uint.div.

The 0 address will always be 0 upon function return, even if one of the return
value addresses is 0.

This library does not depend on any other libraries.

Worst case time complexity:

       Function  |  Time  |     O(n)
     ------------+--------+--------------
          cmp    |    29  |  29
          set    |    24  |  24
          neg    |    25  |  25
          add    |    30  |  30
          sub    |    31  |  31
          mul    |   993  |  33+15*bits
          div    |  1006  |  46+15*bits
          shl    |   185  |  56+17*((bits-1)//8)
          shr    |   546  |  34+8*bits
          not    |    26  |  26
          and    |   485  |  44+7*bits
           or    |   486  |  45+7*bits
          xor    |   487  |  46+7*bits

--------------------------------------------------------------------------------
Index

Comparisons
uint.cmp a b lt eq gt

Integer Arithmetic
uint.set ret a
uint.neg ret a
uint.add ret a b
uint.sub ret a b
uint.mul high low a b
uint.div quot rem num den

Bitwise Arithmetic
uint.shl ret num shift
uint.shr ret num shift
uint.not ret a
uint.and ret a b
uint.or  ret a b
uint.xor ret a b

--------------------------------------------------------------------------------
Version History

1.00
     Initial version. Used uint.cmp, mem.get, and mem.set for proof of concept.
     Functions take tens of thousands of instructions.
2.00
     Unrolled functions so they don't use mem.get and mem.set.
     Functions take thousands of instructions.
3.00
     Optimized functions so they are all under 1100 instructions.
3.01
     Optimized uint.and, or, and xor so the final value is stored in [a]. This
     removes the need for a temporary storage variable.
     Cleaned up uint.cmp so its branching is more straight forward.
3.02
     Optimized uint.set and uint.add to remove 1 instruction.
3.03
     Fixed an error in uint.mul when carrying from low to high. Removed need to
     offset [b] by 1 to check for carrying.
     Updated formatting for uint.cmp.
     Changed uint.div to abort with 0xd0 when dividing by 0.
     Optimized AND/OR/XOR by skipping first loop check.
3.04
     Optimized AND/OR/XOR by 18%. [a] and [b] only need to be offset by 1 on the
     first loop. This removes 2 decrement instructions per loop.
3.05
     Optimized AND/OR/XOR by 11%. Removed the iteration counter and instead
     check if [b]=0. We only set the bottom bit of [a] in 1/4 of cases, and only
     check if [b]=0 in 1/2 of cases. OR/XOR are based off of AND for their loop.
3.06
     Updated comments.
3.07
     Replaced average case time complexity with worst case time complexity.
     Standardized formatting to 8 spaces per column.
3.08
     Updated comments.
3.09
     Changed division by 0 abort instruction.
     Made uint.shl bit length agnostic and lowered run time by 36%.
     Made uint.shr bit length agnostic and lowered run time by 11%.

--------------------------------------------------------------------------------
TODO

Use global "uint" scope and shared variables (.z:, .tmp:, etc).
Add effects to index section.
Add better overview explanations for uint.and, uint.mul, and uint.div.
Remove loop counter from uint.mul. Optimize if high=0.
Remove loop counter from uint.div. Optimize if quot=0 or den>=num.
Calculating A&B might be faster by looking at bit changes in A-B. Use the changes
in runs of 0's and 1's to determine where bit differences are.
|#

#--------------------------------------------------------------------------------
#Comparisons

uint.cmp:
	#Call  : 0 ? uint.cmp a b lt eq gt
	#Effect:
	#     if [a]<[b]: goto lt
	#     if [a]=[b]: goto eq
	#     if [a]>[b]: goto gt
	#Time  : 29
	.z      .arg2   ?+1
	0       .z      ?+1
	0       .z+2    ?+1
	.arg2   0       ?+1
	.arg3   0       ?+1
	.arg4   0       ?+1
	.arg5   0       ?+1
	.arg6   0       ?+1
	0       0       ?+1
	#get [a]
	.z      .z      ?+1
	.z      .arg2:2 ?+1
	.p0     .p0     ?+1
	.p0     .z      ?+1
	.z      .z      ?+1
	.z      .p0:0   ?+1
	.a      .a      ?+1
	.a      .z      ?+1
	#get [b]
	.z      .z      ?+1
	.z      .arg3:3 ?+1
	.b      .b      ?+1
	.b      .z      ?+1
	#[a]-[b]
	.z      .z      ?+1
	.a      .b:0    .le
	#[a]>[b]
	.z      .arg6:6 .ret
.le:
	.a      .z      .eq
	#[a]<[b]
	.z      .arg4:4 .ret
.eq:
	#[a]=[b]
	.z      .arg5:5 .ret
.ret:
	.r0     .r0     ?+1
	.r0     .z      ?+1
	.z      .z      .r0:0
	#Variables
	.a:0
	.z:0 1 2


#--------------------------------------------------------------------------------
#Integer Arithmetic

uint.set:
	#Call  : 0 ? uint.set ret a
	#Effect: [ret]=[a]
	#Time  : 24
	#Setup the stack.
	.tmp    .tmp    ?+1
	.tmp    .arg2   ?+1
	0       .tmp    ?+1
	0       .off    ?+1
	.arg2   0       ?+1
	.arg3   0       ?+1
	.arg4   0       ?+1
	#Get [ret]
	.p0     .arg2:2 ?+1
	.p1     .p0     ?+1
	.p2     .p0     ?+1
	.tmp    .tmp    ?+1
	.tmp    .p1     ?+1
	.p0     .p0     ?+1
	.p0     .tmp    ?+1
	#Get [a]
	.tmp    .tmp    ?+1
	.tmp    .arg3:3 ?+1
	.p3     .p3     ?+1
	.p3     .tmp    ?+1
	#Set [ret]
	.ret    .ret    ?+1
	.ret    .p3:0   ?+1  #[ret]=-[a]
	.p0:0   .p1:0   ?+1
	.p2:0   .ret    ?+1  #[ret]=[a]
	0       0       .arg4:4
	#Variables
	.off:2
	.ret:0
	.tmp:0


uint.neg:
	#Call  : 0 ? uint.neg ret a
	#Effect: [ret]=-[a]
	#Time  : 25
	#Setup the stack.
	.tmp    .tmp    ?+1
	.tmp    .arg2   ?+1
	0       .tmp    ?+1
	0       .off    ?+1
	.arg2   0       ?+1
	.arg3   0       ?+1
	.arg4   0       ?+1
	#Get [ret]
	.tmp    .tmp    ?+1
	.tmp    .arg2:2 ?+1
	.p0     .p0     ?+1
	.p0     .tmp    ?+1
	.p1     .p1     ?+1
	.p1     .tmp    ?+1
	#Get [a]
	.tmp    .tmp    ?+1
	.tmp    .arg3:3 ?+1
	.p2     .p2     ?+1
	.p2     .tmp    ?+1
	#Set [ret]
	.tmp    .tmp    ?+1
	.tmp    .p0:0   ?+1  #[tmp]=-[ret]
	.tmp    .p2:0   ?+1  #[tmp]=-[ret]-[a]
	.ret    .ret    ?+1
	.ret    .tmp    ?+1  #[ret]=[ret]+[a]
	.p1:0   .ret    ?+1  #[ret]=[ret]-([ret]+[a])=-[a]
	0       0       .arg4:4
	#Variables
	.off:2
	.ret:0
	.tmp:0


uint.add:
	#Call  : 0 ? uint.add ret a b
	#Effect: [ret]=[a]+[b]
	#Time  : 30
	#Setup the stack.
	.tmp    .tmp    ?+1
	.tmp    .arg0   ?+1
	0       .tmp    ?+1
	.arg0   0       ?+1
	.arg2   0       ?+1
	.arg3   0       ?+1
	.arg4   0       ?+1
	.arg5   0       ?+1
	#Get [ret]
	.p0     .arg2:2 ?+1
	.p1     .p0     ?+1
	.p2     .p0     ?+1
	.tmp    .tmp    ?+1
	.tmp    .p1     ?+1
	.p0     .p0     ?+1
	.p0     .tmp    ?+1
	#Get [a]
	.tmp    .tmp    ?+1
	.tmp    .arg3:3 ?+1
	.p3     .p3     ?+1
	.p3     .tmp    ?+1
	#Get [b]
	.tmp    .tmp    ?+1
	.tmp    .arg4:4 ?+1
	.p4     .p4     ?+1
	.p4     .tmp    ?+1
	#Set [ret]
	.tmp    .tmp    ?+1
	.tmp    .p3:0   ?+1  #[tmp]=-[a]
	.tmp    .p4:0   ?+1  #[tmp]=-[a]-[b]
	.p0:0   .p1:0   ?+1
	.p2:0   .tmp    ?+1  #[ret]=[a]+[b]
	#Return
	0       0       .arg5:5
	#Variables
	.arg0:0
	.tmp:0
	.pt:0


uint.sub:
	#Call  : 0 ? uint.sub ret a b
	#Effect: [ret]=[a]-[b]
	#Time  : 31
	#Setup the stack.
	.tmp    .tmp    ?+1
	.tmp    .arg0   ?+1
	0       .tmp    ?+1
	.arg0   0       ?+1
	.arg2   0       ?+1
	.arg3   0       ?+1
	.arg4   0       ?+1
	.arg5   0       ?+1
	#Get [ret]
	.tmp    .tmp    ?+1
	.tmp    .arg2:2 ?+1
	.p0     .p0     ?+1
	.p0     .tmp    ?+1
	.p1     .p1     ?+1
	.p1     .tmp    ?+1
	#Get [a]
	.tmp    .tmp    ?+1
	.tmp    .arg3:3 ?+1
	.p2     .p2     ?+1
	.p2     .tmp    ?+1
	#Get [b]
	.tmp    .tmp    ?+1
	.tmp    .arg4:4 ?+1
	.p3     .p3     ?+1
	.p3     .tmp    ?+1
	#Set [ret]
	.tmp    .tmp    ?+1
	.tmp    .p0:0   ?+1  #[tmp]=-[ret]
	.tmp    .p3:0   ?+1  #[tmp]=-[ret]-[b]
	.ret    .ret    ?+1
	.ret    .p2:0   ?+1  #[ret]=-[a]
	.ret    .tmp    ?+1  #[ret]=[ret]-[a]+[b]
	.p1:0   .ret    ?+1  #[ret]=[a]-[b]
	#Return
	0       0       .arg5:5
	#Variables
	.arg0:0
	.ret:0
	.tmp:0


uint.mul:
	#Call  : 0 ? uint.mul high low a b
	#Effect:
	#     [high]=([a]*[b])/2^64
	#     [low] =([a]*[b])%2^64
	#Time  : 33+15*bits = 993
	#Setup stack pointer.
	.tmp    .tmp    ?+1
	.tmp    .arg2   ?+1
	0       .tmp    ?+1
	0       .z+2    ?+1
	.arg2   0       ?+1
	.arg3   0       ?+1
	.arg4   0       ?+1
	.arg5   0       ?+1
	.arg6   0       ?+1
	#Get high.
	.tmp    .tmp    ?+1
	.tmp    .arg2:2 ?+1
	.h0     .h0     ?+1
	.h0     .tmp    ?+1
	.h1     .h1     ?+1
	.h1     .tmp    ?+1
	#Get low.
	.tmp    .tmp    ?+1
	.tmp    .arg3:3 ?+1
	.l0     .l0     ?+1
	.l0     .tmp    ?+1
	.l1     .l1     ?+1
	.l1     .tmp    ?+1
	#Get -[a]. Use -[a] for adding to [lval].
	.tmp    .tmp    ?+1
	.tmp    .arg4:4 ?+1
	.a0     .a0     ?+1
	.a0     .tmp    ?+1
	.a      .a      ?+1
	.a      .a0:0   ?+1
	#Get [b].
	.tmp    .tmp    ?+1
	.tmp    .arg5:5 ?+1
	.b0     .b0     ?+1
	.b0     .tmp    ?+1
	.tmp    .tmp    ?+1
	.tmp    .b0:0   ?+1
	.b      .b      ?+1
	.b      .tmp    ?+1
	#Initialize lval and hval.
	.hval   .hval   ?+1
	.lval   .lval   ?+1
	#Manually perform the first loop and make sure [b] is odd.
	.tmp    .z+1    ?+1
	.b      .tmp    ?+4
	.lval   .a      ?+1
	.i      .bits   ?+13
.loop:
	#Check loop.
	.i      .z+1    .ret
	#Left shift [hval] and [lval].
	.tmp    .tmp    ?+1
	.tmp    .hval   ?+1
	.hval   .tmp    ?+1
	.tmp    .tmp    ?+1
	.tmp    .lval   ?+1
	.tmp    .z+1    ?+1
	.lval   .tmp    ?+4
	.hval   .z-1    ?+1
	.lval   .z+1    ?+1
	#If the highest bit of [b] is set, add [a] to [lval] and carry to [hval].
	#Since [b] is guaranteed to be odd, we don't need to offset it.
	.tmp    .tmp    ?+1
	.tmp    .b      ?+1
	.b      .tmp    .loop
	.lval   .a      .loop
	.hval   .z-1    .loop
.ret:
	#Set [high].
	.hval   .h0:0   ?+1
	.tmp    .tmp    ?+1
	.tmp    .hval   ?+1
	.h1:0   .tmp    ?+1
	#Set [low].
	.lval   .l0:0   ?+1
	.tmp    .tmp    ?+1
	.tmp    .lval   ?+1
	.l1:0   .tmp    ?+1
	0       0       .arg6:6
	#Variables
	0-1 .z:0 1 2
	.tmp:0
	.a:0
	.b:0
	.hval:0
	.lval:0
	.i:0
	.bits:0-63


uint.div:
	#Call  : 0 ? uint.div quot rem num den
	#Effect:
	#     [quot]=[num]/[den], rounded down
	#     [rem] =[num]%[den]
	#Time  : 46+15*bits = 1006
	#Setup stack pointer.
	.tmp    .tmp    ?+1
	.tmp    .arg2   ?+1
	0       .tmp    ?+1
	0       .z+2    ?+1
	.arg2   0       ?+1
	.arg3   0       ?+1
	.arg4   0       ?+1
	.arg5   0       ?+1
	.arg6   0       ?+1
	#Get quotient.
	.tmp    .tmp    ?+1
	.tmp    .arg2:2 ?+1
	.r0     .r0     ?+1
	.r0     .tmp    ?+1
	.r1     .r1     ?+1
	.r1     .tmp    ?+1
	#Get remainder.
	.tmp    .tmp    ?+1
	.tmp    .arg3:3 ?+1
	.r2     .r2     ?+1
	.r2     .tmp    ?+1
	.r3     .r3     ?+1
	.r3     .tmp    ?+1
	#Get numerator.
	.tmp    .tmp    ?+1
	.tmp    .arg4:4 ?+1
	.p0     .p0     ?+1
	.p0     .tmp    ?+1
	.tmp    .tmp    ?+1
	.tmp    .p0:0   ?+1
	.num    .num    ?+1
	.num    .tmp    ?+1
	#Get denominator.
	.tmp    .tmp    ?+1
	.tmp    .arg5:5 ?+1
	.p1     .p1     ?+1
	.p1     .tmp    ?+1
	.nden   .nden   ?+1
	.nden   .p1:0   ?+1
	#If [den]=0, abort
	.nden   .z      .divz
	.nden   .z-1    ?+1
	.den    .den    ?+1
	.den    .nden   ?+1
	#Start loop.
	.quot   .quot   ?+1
	.rem    .rem    ?+1
	.i      .bits   ?+1
.loop:
	#[rem]+=[num]>>63, [num]<<=1
	.tmp    .tmp    ?+1
	.tmp    .num    ?+1
	.tmp    .z+1    ?+1
	.num    .tmp    ?+4
	.rem    .z-1    ?+1
	#if [rem]>=[den], [quot]+=1
	.rem    .den    ?+7
	.rem    .z+1    ?+1
	.quot   .z-1    ?+4
	.rem    .nden   ?+1
	.i      .z+1    .ret
	#[quot]<<=1
	.tmp    .tmp    ?+1
	.tmp    .quot   ?+1
	.quot   .tmp    ?+1
	#[rem]<<=1
	.tmp    .tmp    ?+1
	.tmp    .rem    ?+1
	.rem    .tmp    .loop
.ret:
	#Set quotient.
	.quot   .r0:0   ?+1
	.tmp    .tmp    ?+1
	.tmp    .quot   ?+1
	.r1:0   .tmp    ?+1
	#Set remainder.
	.rem    .r2:0   ?+1
	.tmp    .tmp    ?+1
	.tmp    .rem    ?+1
	.r3:0   .tmp    ?+1
	0       0       .arg6:6
.divz:
	#Abort.
	0-1     0       ?-2
	#Variables
	.num:0
	.den:0
	.nden:0
	.quot:0
	.rem:0
	.tmp:0
	.i:0
	.bits:0-64
	0-1 .z:0 1 2


#--------------------------------------------------------------------------------
#Bitwise Arithmetic

uint.shl:
	#Call  : 0 ? uint.shl ret num shift
	#Effect: [ret]=[num]<<[shift]
	#Time  : 38+17*((bits-1)//8)+4*((bits-1)%8) = 185
	#Setup stack pointer.
	.tmp    .tmp    ?+1
	.tmp    .arg2   ?+1
	0       .tmp    ?+1
	0       .z+2    ?+1
	.arg2   0       ?+1
	.arg3   0       ?+1
	.arg4   0       ?+1
	.arg5   0       ?+1
	#Get ret.
	.tmp    .tmp    ?+1
	.tmp    .arg2:2 ?+1
	.ret0   .ret0   ?+1
	.ret0   .tmp    ?+1
	.ret1   .ret1   ?+1
	.ret1   .tmp    ?+1
	#Get -[num]
	.tmp    .tmp    ?+1
	.tmp    .arg3:3 ?+1
	.p0     .p0     ?+1
	.p0     .tmp    ?+1
	.num    .num    ?+1
	.num    .p0:0   ?+1
	#Get [shift]
	.tmp    .tmp    ?+1
	.tmp    .arg4:4 ?+1
	.p1     .p1     ?+1
	.p1     .tmp    ?+1
	.tmp    .tmp    ?+1
	.tmp    .p1:0   ?+1
	.shift  .shift  ?+1
	.shift  .tmp    .done8-3
	#[num]=[num]<<8. Abort if [num]=0.
.loop8:
	.num    .z      .ret
	.shift  .p7     .done8
	.shift  .z+1    ?+1
	.tmp    .num    ?+1
	.tmp    .num    ?+1
	.num    .tmp    ?+1
	.tmp    .num    ?+1
	.num    .tmp    ?+1
	.num    .tmp    ?+1
	.tmp    .num    ?+1
	.tmp    .num    ?+1
	.num    .tmp    ?+1
	.num    .tmp    ?+1
	.tmp    .num    ?+1
	.tmp    .num    ?+1
	.num    .tmp    ?+1
	.tmp    .tmp    .loop8
.done8:
	.shift  .n8     ?+1
	#[num]=[num]<<1
.loop1:
	.shift  .z+1    .ret
	.tmp    .num    ?+1
	.num    .tmp    ?+1
	.tmp    .tmp    .loop1
.ret:
	#Set [ret].
	.tmp    .ret0:0 ?+1
	.num    .tmp    ?+1
	.ret1:0 .num    ?+1
	0       0       .arg5:5
	#Variables
	.num:0
	.shift:0
	.tmp:0
	.z:0 1 2
	.p7:7
	.n8:0-8


uint.shr:
	#Call  : 0 ? uint.shr ret num shift
	#Effect: [ret]=[num]>>[shift]
	#Time  : 34+8*bits = 546
	#Setup stack pointer.
	.tmp    .tmp    ?+1
	.tmp    .arg2   ?+1
	0       .tmp    ?+1
	0       .z+2    ?+1
	.arg2   0       ?+1
	.arg3   0       ?+1
	.arg4   0       ?+1
	.arg5   0       ?+1
	#On first run, calculate how many bits we are using.
	.tmp    .tmp    .skip:?+1
	.skip   .fval   ?+1
	.num    .z-1    ?+1
.firstloop:
	.num    .z      .firstdone
	.tmp    .num    ?+1
	.num    .tmp    ?+1
	.nbits  .z+1    ?+1
	.tmp    .tmp    .firstloop
.firstdone:
	#Get ret
	.tmp    .arg2:2 ?+1
	.ret0   .ret0   ?+1
	.ret0   .tmp    ?+1
	.ret1   .ret1   ?+1
	.ret1   .tmp    ?+1
	.rval   .rval   ?+1
	#Get [num]
	.tmp    .tmp    ?+1
	.tmp    .arg3:3 ?+1
	.p0     .p0     ?+1
	.p0     .tmp    ?+1
	.tmp    .tmp    ?+1
	.tmp    .p0:0   ?+1
	.num    .num    ?+1
	.num    .tmp    ?+1
	#Get [shift]
	.tmp    .tmp    ?+1
	.tmp    .arg4:4 ?+1
	.p1     .p1     ?+1
	.p1     .tmp    ?+1
	.shift  .shift  ?+1
	.shift  .nbits  ?+1
	#If [shift]>=[bits], abort.
	.shift  .p1:0   .ret
	.tmp    .tmp    ?+1
	.tmp    .num    ?+1
	.tmp    .z+1    ?+1
	.num    .tmp    .loop
	.rval   .z-1    ?+1
.loop:
	.shift  .z+1    .ret
	#[rval]<<=1
	.tmp    .tmp    ?+1
	.tmp    .rval   ?+1
	.rval   .tmp    ?+1
	#[num]<<=1
	.tmp    .tmp    ?+1
	.tmp    .num    ?+1
	.num    .tmp    .loop
	.rval   .z-1    .loop
.ret:
	#Set [ret].
	.tmp    .tmp    ?+1
	.rval   .ret0:0 ?+1
	.tmp    .rval   ?+1
	.ret1:0 .tmp    ?+1
	0       0       .arg5:5
	#Variables
	.fval:.skip+1-.firstdone
	.num:0
	.rval:0
	.shift:0
	.tmp:0
	.nbits:0
	0-1 .z:0 1 2


uint.not:
	#Call  : 0 ? uint.not ret a
	#Effect: [ret]=~[a]
	#Time  : 26
	#Use the relation -1-[a]=~[a]
	#Setup the stack.
	.tmp    .tmp    ?+1
	.tmp    .arg2   ?+1
	0       .tmp    ?+1
	0       .z+2    ?+1
	.arg2   0       ?+1
	.arg3   0       ?+1
	.arg4   0       ?+1
	#Get [ret]
	.tmp    .tmp    ?+1
	.tmp    .arg2:2 ?+1
	.p0     .p0     ?+1
	.p0     .tmp    ?+1
	.p1     .p1     ?+1
	.p1     .tmp    ?+1
	#Get [a]
	.tmp    .tmp    ?+1
	.tmp    .arg3:3 ?+1
	.p2     .p2     ?+1
	.p2     .tmp    ?+1
	#Set [ret]
	.tmp    .tmp    ?+1
	.tmp    .p0:0   ?+1  #[tmp]=-[ret]
	.tmp    .p2:0   ?+1  #[tmp]=-[ret]-[a]
	.tmp    .z+1    ?+1
	.ret    .ret    ?+1
	.ret    .tmp    ?+1  #[ret]=[ret]+[a]
	.p1:0   .ret    ?+1  #[ret]=[ret]-([ret]+[a])=-[a]
	0       0       .arg4:4
	#Variables
	.z:0 1 2
	.ret:0
	.tmp:0


uint.and:
	#Call  : 0 ? uint.and ret a b
	#Effect: [ret]=[a]&[b]
	#Time  : 44+7*bits = 485
	#This function works by making sure that the bottom bit is set for [a] and [b].
	#As we shift [b] left, if [b]=0, then we know we have processed all bits. As we
	#rotate [a] left, if we need to set a bit, we simply add 1 to it. The main loop
	#is arranged to minimize the number of [a] bits set or [b]=0 checks needed.
	#Setup stack pointer.
	.atmp   .arg2   ?+1
	0       .atmp   ?+1
	0       .z+2    ?+1
	.arg2   0       ?+1
	.arg3   0       ?+1
	.arg4   0       ?+1
	.arg5   0       ?+1
	#Get [ret]
	.atmp   .atmp   ?+1
	.atmp   .arg2:2 ?+1
	.ret0   .ret0   ?+1
	.ret0   .atmp   ?+1
	.ret1   .ret1   ?+1
	.ret1   .atmp   ?+1
	#Get [a]
	.atmp   .atmp   ?+1
	.atmp   .arg3:3 ?+1
	.a0     .a0     ?+1
	.a0     .atmp   ?+1
	.atmp   .atmp   ?+1
	.atmp   .a0:0   ?+1
	.a      .a      ?+1
	.a      .atmp   ?+1
	#Get [b]
	.btmp   .btmp   ?+1
	.btmp   .arg4:4 ?+1
	.b0     .b0     ?+1
	.b0     .btmp   ?+1
	.btmp   .btmp   ?+1
	.btmp   .b0:0   ?+1
	.b      .btmp   ?+1
	#Perform the first iteration outside of the loop. We need [a] and [b] to be odd
	#so that we can efficiently check for carrying in the loop. Flag if the top bit
	#needs to be set at the end.
	        .atmp   .z+1    ?+1
	        .btmp   .z+1    ?+1
	        .a      .atmp   .l0x
	.l1x:   .b      .btmp   .l00
	.l11:   .atmp   .atmp   .loop
	.l0x:   .b      .btmp   .l00
	.l00:   .top    .z+1    ?+1
	        .atmp   .atmp   .loop
	#Loop until [b]=0.
.loop:
	#Prepare [b] for shift and carry.
	        .btmp   .btmp   ?+1
	        .btmp   .b      ?+1
	#Left shift [a] and [b] and check for carry. Set low bit of [a] if needed.
	#If [b]<=[btmp] and [b]=0, then we are done.
	        .b      .btmp   .f0x
	.f1x:   .atmp   .a      ?+1
	        .a      .atmp   .f00
	.f11:   .a      .z-1    .f00
	.f0x:   .b      .z      .done
	        .atmp   .a      ?+1
	        .a      .atmp   .f00
	.f00:   .atmp   .atmp   .loop
.done:
	#Check if the top bit needs to be zero'd.
	.top    .top:.z ?+4
	.a      .btmp   ?+1
	#We have [a]=[a]&[b]+-[btmp] and [btmp]=2^(n-1).
	.a      .ret0:0 ?+1
	.btmp   .a      ?+1
	.ret1:0 .btmp   ?+1
	0       0       .arg5:5
	#Variables
	0-1 .z:0 1 2
	.a:0 .atmp:0
	.b:0 .btmp:0


uint.or:
	#Call  : 0 ? uint.or ret a b
	#Effect: [ret]=[a]|[b]
	#Time  : 45+7*bits = 486
	#Use uint.and and the relation A|B=-1-(~A)&(~B).
	#Setup stack pointer.
	.atmp   .arg2   ?+1
	0       .atmp   ?+1
	0       .z+2    ?+1
	.arg2   0       ?+1
	.arg3   0       ?+1
	.arg4   0       ?+1
	.arg5   0       ?+1
	#Get [ret]
	.atmp   .atmp   ?+1
	.atmp   .arg2:2 ?+1
	.ret0   .ret0   ?+1
	.ret0   .atmp   ?+1
	.ret1   .ret1   ?+1
	.ret1   .atmp   ?+1
	#Get -[a]
	.atmp   .atmp   ?+1
	.atmp   .arg3:3 ?+1
	.a0     .a0     ?+1
	.a0     .atmp   ?+1
	.a      .a      ?+1
	.a      .a0:0   ?+1
	.atmp   .atmp   ?+1
	.atmp   .a      ?+1
	#Get -[b]
	.btmp   .btmp   ?+1
	.btmp   .arg4:4 ?+1
	.b0     .b0     ?+1
	.b0     .btmp   ?+1
	.b      .b0:0   ?+1
	.btmp   .btmp   ?+1
	.btmp   .b      ?+1
	#Perform the first iteration outside of the loop. We need [a] and [b] to be odd
	#so that we can efficiently check for carrying in the loop. Flag if the top bit
	#needs to be set.
	        .a      .z+1    ?+1
	        .b      .z+1    ?+1
	        .a      .atmp   .l0x
	.l1x:   .b      .btmp   .l00
	.l11:   .atmp   .atmp   .loop
	.l0x:   .b      .btmp   .l00
	.l00:   .top    .z+1    ?+1
	        .atmp   .atmp   .loop
	#Loop until [b]=0.
.loop:
	#Prepare [b] for shift and carry.
	        .btmp   .btmp   ?+1
	        .btmp   .b      ?+1
	#Left shift [a] and [b] and check for carry. Set low bit of [a] if needed.
	#If [b]<=[btmp] and [b]=0, then we are done.
	        .b      .btmp   .f0x
	.f1x:   .atmp   .a      ?+1
	        .a      .atmp   .f00
	.f11:   .a      .z-1    .f00
	.f0x:   .b      .z      .done
	        .atmp   .a      ?+1
	        .a      .atmp   .f00
	.f00:   .atmp   .atmp   .loop
.done:
	#Check if the top bit needs to be zero'd.
	.top    .top:.z ?+4
	.a      .btmp   ?+1
	#We have [a]=[a]&[b]+-[btmp] and [btmp]=2^(n-1).
	#A|B=-1-(~A)&(~B)
	.a      .z-1    ?+1
	.btmp   .ret0:0 ?+1
	.a      .btmp   ?+1
	.ret1:0 .a      ?+1
	0       0       .arg5:5
	#Variables
	0-1 .z:0 1 2
	.a:0 .atmp:0
	.b:0 .btmp:0


uint.xor:
	#Call  : 0 ? uint.xor ret a b
	#Effect: [ret]=[a]^[b]
	#Time  : 46+7*bits = 487
	#Use uint.and and the relation A^B=A+B-2(A&B).
	#Setup stack pointer.
	.atmp   .arg2   ?+1
	0       .atmp   ?+1
	0       .z+2    ?+1
	.arg2   0       ?+1
	.arg3   0       ?+1
	.arg4   0       ?+1
	.arg5   0       ?+1
	#Get [ret]
	.atmp   .atmp   ?+1
	.atmp   .arg2:2 ?+1
	.ret0   .ret0   ?+1
	.ret0   .atmp   ?+1
	.ret1   .ret1   ?+1
	.ret1   .atmp   ?+1
	#Get [a]
	.atmp   .atmp   ?+1
	.atmp   .arg3:3 ?+1
	.a0     .a0     ?+1
	.a0     .atmp   ?+1
	.atmp   .atmp   ?+1
	.atmp   .a0:0   ?+1
	.a      .a      ?+1
	.a      .atmp   ?+1
	#Get [b]
	.btmp   .btmp   ?+1
	.btmp   .arg4:4 ?+1
	.b0     .b0     ?+1
	.b0     .btmp   ?+1
	.btmp   .btmp   ?+1
	.btmp   .b0:0   ?+1
	.b      .btmp   ?+1
	#Perform the first iteration outside of the loop. We need [a] and [b] to be odd
	#so that we can efficiently check for carrying in the loop.
	.off    .off    ?+1
	.off    .atmp   ?+1
	.off    .btmp   ?+1
	.atmp   .z+1    ?+1
	.btmp   .z+1    ?+1
	.a      .atmp   ?+1
	.b      .btmp   ?+1
	.atmp   .atmp   .loop
	#Loop until [b]=0.
.loop:
	#Prepare [b] for shift and carry.
	        .btmp   .btmp   ?+1
	        .btmp   .b      ?+1
	#Left shift [a] and [b] and check for carry. Set low bit of [a] if needed.
	#If [b]<=[btmp] and [b]=0, then we are done.
	        .b      .btmp   .f0x
	.f1x:   .atmp   .a      ?+1
	        .a      .atmp   .f00
	.f11:   .a      .z-1    .f00
	.f0x:   .b      .z      .done
	        .atmp   .a      ?+1
	        .a      .atmp   .f00
	.f00:   .atmp   .atmp   .loop
.done:
	#We have [a]=[a]&[b]+-[btmp] and [btmp]=2^(n-1).
	#Use A^B=A+B-2(A&B).
	.off    .a      ?+1
	.off    .ret0:0 ?+1
	.a      .off    ?+1
	.ret1:0 .a      ?+1
	0       0       .arg5:5
	#Variables
	0-1 .z:0 1 2
	.a:0 .atmp:0
	.b:0 .btmp:0
	.off:0

#|==============================================================================

String Printing - v1.05

Author: Alec Dee - alecdee.github.io - akdee144@gmail.com

--------------------------------------------------------------------------------
ASCII Table

  0  00  NUL |  26  1a      |  52  34   4  |  78  4e   N  | 104  68   h
  1  01      |  27  1b  ESC |  53  35   5  |  79  4f   O  | 105  69   i
  2  02      |  28  1c      |  54  36   6  |  80  50   P  | 106  6a   j
  3  03      |  29  1d      |  55  37   7  |  81  51   Q  | 107  6b   k
  4  04      |  30  1e      |  56  38   8  |  82  52   R  | 108  6c   l
  5  05      |  31  1f      |  57  39   9  |  83  53   S  | 109  6d   m
  6  06      |  32  20  SPC |  58  3a   :  |  84  54   T  | 110  6e   n
  7  07  BEL |  33  21   !  |  59  3b   ;  |  85  55   U  | 111  6f   o
  8  08  BCK |  34  22   "  |  60  3c   <  |  86  56   V  | 112  70   p
  9  09  TAB |  35  23   #  |  61  3d   =  |  87  57   W  | 113  71   q
 10  0a  LF  |  36  24   $  |  62  3e   >  |  88  58   X  | 114  72   r
 11  0b  VTB |  37  25   %  |  63  3f   ?  |  89  59   Y  | 115  73   s
 12  0c      |  38  26   &  |  64  40   @  |  90  5a   Z  | 116  74   t
 13  0d  CR  |  39  27   '  |  65  41   A  |  91  5b   [  | 117  75   u
 14  0e      |  40  28   (  |  66  42   B  |  92  5c   \  | 118  76   v
 15  0f      |  41  29   )  |  67  43   C  |  93  5d   ]  | 119  77   w
 16  10      |  42  2a   *  |  68  44   D  |  94  5e   ^  | 120  78   x
 17  11      |  43  2b   +  |  69  45   E  |  95  5f   _  | 121  79   y
 18  12      |  44  2c   ,  |  70  46   F  |  96  60   `  | 122  7a   z
 19  13      |  45  2d   -  |  71  47   G  |  97  61   a  | 123  7b   {
 20  14      |  46  2e   .  |  72  48   H  |  98  62   b  | 124  7c   |
 21  15      |  47  2f   /  |  73  49   I  |  99  63   c  | 125  7d   }
 22  16      |  48  30   0  |  74  4a   J  | 100  64   d  | 126  7e   ~
 23  17      |  49  31   1  |  75  4b   K  | 101  65   e  | 127  7f  DEL
 24  18  CAN |  50  32   2  |  76  4c   L  | 102  66   f  |
 25  19      |  51  33   3  |  77  4d   M  | 103  67   g  |
|#

print:
	#Call: 0 ? print char0 char1 char2 ... 0
	#Print function. Prints a zero terminated ASCII string. If -1 is used as a
	#character value, then treat the next character as a pointer to a number.
	.ptr    .ptr    ?+1
	.ptr    0       ?+1
	.ptr    .z-2    ?+1
	0       0       ?+2
	.ret:   .tmp
.loop:
	#Get the next character.
	.tmp    .ptr:0  ?+1
	.ptr    .z-1    ?+1
	.char   .char   ?+1
	.char   .tmp    .p0:?+1
	#If [char]=0, we've reached the end of the string.
	.char   .z      .ret
	#If [char]>0, and [tmp]<=1, then [char]=-1.
	.tmp    .z+1    .numprep
	#Print [char].
.print:
	0-2     .char   ?+1
	.tmp    .tmp    .loop
.numprep:
	#Prepare to print a number.
	#First entry. Jump back to beginning of loop to get the number's pointer.
	.p0     .pset   .loop
	#Second entry. Get the number from [char].
	.p0     .prem   ?+1
	.tmp    .tmp    ?+1
	.tmp    .char:0 ?+1
	.num    .tmp    ?+1
	.show   .show   ?+1
	.base   .base0  ?+1
.numloop:
	#Store a power of 10 in [tmp].
	.tmp    .tmp    ?+1
	.tmp    .base:.base0-1 ?+1
	.char   .char   ?+1
	.char   .char0  ?+1
	#Subtract [tmp] from [num] to get the next digit.
.digitloop:
	.num    .tmp    .digitdone
	.num    .z+1    ?+1
	.show   .z-1    ?+1
	.char   .z-1    .digitloop
.digitdone:
	#If [tmp]=0 then return to the main loop and print the last digit.
	.tmp    .z      .print
	#Add [num]+=[tmp] to correct for the last [num]-[tmp] operation.
	.z      .tmp    ?+1
	.num    .z      ?+1
	.z      .z      ?+1
	#If [show]>0, then we can print digits.
	.show   .z      .noshow
	0-2     .char   ?+1
.noshow:
	.base   .z-1    .numloop
	#Variables
	0-2 0-1 .z:0 1
	.num:0
	.tmp:0
	.show:0
	.char0:0-48
	.pset:.p0-.numprep-2
	.prem:.numprep-.p0+2
	#1-10^n
	.base10:
		0-9999999999999999999 0-999999999999999999 0-99999999999999999
		   0-9999999999999999    0-999999999999999    0-99999999999999
		      0-9999999999999       0-999999999999       0-99999999999
		         0-9999999999          0-999999999          0-99999999
		            0-9999999             0-999999             0-99999
		               0-9999                0-999                0-99
		                  0-9                    0
	.base0:?-.base10-1

