#|==============================================================================


ASCII Converter - v1.03

Copyright 2022 Alec Dee - MIT license - SPDX: MIT
alecdee.github.io - akdee144@gmail.com


--------------------------------------------------------------------------------
About


When run, will take an input string and output the string's ASCII character
values. For example, if "Hello" is the input, then "72 101 108 108 111" will be
the output.


|#

0 0 toascii

toascii:
	# enter text:
	0 ? print 101 110 116 101 114 32 116 101 120 116 58 32 0
	# Wait for input.
	.tmp0   0-3     ?+1
	0 ? print 97 115 99 105 105 32 32 32 32 32 58 32 0
	# Loop through stdin and print ascii character codes.
.loop:
	# If we've read the eol character, exit.
	.tmp1   .tmp1   ?+1
	.tmp1   .tmp0   ?+1
	.tmp0   .eol    ?+1
	.tmp0   0       .exit
	0 ? uint.print .tmp1
	0 ? print 32 0
	.tmp0   .tmp0   ?+1
	.tmp0   0-3     .loop
.exit:
	0-2     .tmp1   ?+1
	0-1     0       0
	# Variables
	.tmp0:0
	.tmp1:0
	.eol:0-10


print:
	# Call  : 0 ? print char0 char1 char2 ... 0
	# Effect: Prints a string.
	.ptr    .ptr    ?+1
	.ptr    0       ?+1
	.ptr    .z-2    ?+1
	0       0       ?+2
	.ret:   .tmp
.loop:
	# Get the next character.
	.tmp    .ptr:0  ?+1
	.ptr    .z-1    ?+1
	.char   .char   ?+1
	.char   .tmp    ?+1
	# If [char]=0, we've reached the end of the string.
	.char   .z      .ret
	# Print [char].
	0-2     .char   ?+1
	.tmp    .tmp    .loop
	# Variables
	0-2 0-1 .z:0 1
	.num:0
	.tmp:0
	.char:0


uint.print:
	# Call  : 0 ? uint.print num
	# Effect: Prints a number in an arbitrary base.
	# Setup stack pointer.
	.tmp    .tmp    ?+1
	.tmp    .arg2   ?+1
	.tmp    .z-2    ?+1
	0       .tmp    ?+1
	.arg2   0       ?+1
	.arg3   0       ?+1
	# Get [num].
	.tmp    .tmp    ?+1
	.tmp    .arg2:2 ?+1
	.p0     .p0     ?+1
	.p0     .tmp    ?+1
	.nnum   .nnum   ?+1
	.nnum   .p0:0   ?+1
	.num    .num    ?+1
	.num    .nnum   ?+1
.notunary:
	# Calculate the most significant digit and how many digits are in [num].
	.den    .den    ?+1
	.lden   .lden   ?+1
	.base   .base   ?+1
	.base   .nbase  ?+1
	.chr    .chr    ?+1
	.chr    .z-1    ?+1
.firstloop:
	.digits .z-1    ?+1
	# num-=den
	.chr    .base   ?+1
	.num    .den   .firstdone
	.num    .z+1    ?+1
	.chr    .z-2    ?-8
	# den=base*lden-1
	.lden   .lden   ?+1
	.lden   .den    ?+1
	.den    .den    ?+1
	.den    .nnum   ?+1
	.den    .num    ?+1
	.den    .z+1    ?+1
	.num    .num    ?+1
	.num    .nnum   .firstloop
.firstdone:
	# Correct [num], [base], and [den].
	.chr    .nbase  ?+1
	.base   .z+2    ?+1
	.tmp    .tmp    ?+1
	.tmp    .den    ?+1
	.num    .tmp    ?+1
	.den    .den    ?+1
	.den    .lden   .printdigit
.nextloop:
	# num=num*base
	.z+1    .base   ?+1
	.num    .lden   ?+1
	.nnum   .nnum   ?+1
	.nnum   .num    ?+1
	.num    .nnum   ?+1
	.z+1    .z-2    ?-5
.printdigit:
	# Print a digit.
	.chr    .nhex   ?+1
	0-2     .chr:0  ?+1
	.digits .z+1    .ret
	# digit=num/den
	.chr    .chr    ?+1
	.num    .den    .nextloop
	.num    .z+1    ?+1
	.chr    .z-2    ?-8
.ret:
	0       0       .arg3:3
	# Variables
	0-2 0-1 .z:0 1 2
	.nnum:0
	.num:0
	.nbase:0-20
	.base:0
	.digits:0
	.tmp:0
	.den:0
	.lden:0
	.hex:
		48 48 49 49 50 50 51 51 52 52 53 53 54 54 55 55
		56 56 57 57
	.nhex:0-.hex

